import fs from "fs";
import path from "path";
import fetch from "node-fetch";

const STRAPI_URL = process.env.STRAPI_URL || "https://admin.ludno.ru";
const BASE_URL   = process.env.BASE_URL   || "https://ludno.ru";
const OUT_PATH   = path.resolve("public", "sitemap.xml");

// ‚Äî‚Äî‚Äî —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî‚Äî‚Äî
const STATIC_URLS = [
  "/",
  "/products",
  "/contacts",
  "/projects",
  "/kinetics-solution",
  "/tramptec-solution",
  "/mini-solution",
  "/playlet-solution",
  "/bloqi-solution",
  "/parkfit-solution",
  "/towers-solution",
];

// ‚Äî‚Äî‚Äî —É—Ç–∏–ª–∏—Ç—ã ‚Äî‚Äî‚Äî
function slugify(str) {
  if (!str) return "";
  const map = {
    –∞:"a",–±:"b",–≤:"v",–≥:"g",–¥:"d",–µ:"e",—ë:"e",–∂:"zh",–∑:"z",–∏:"i",–π:"i",–∫:"k",–ª:"l",
    –º:"m",–Ω:"n",–æ:"o",–ø:"p",—Ä:"r",—Å:"s",—Ç:"t",—É:"u",—Ñ:"f",—Ö:"h",—Ü:"c",—á:"ch",—à:"sh",
    —â:"shch",—ä:"",—ã:"y",—å:"",—ç:"e",—é:"yu",—è:"ya",
    –ê:"a",–ë:"b",–í:"v",–ì:"g",–î:"d",–ï:"e",–Å:"e",–ñ:"zh",–ó:"z",–ò:"i",–ô:"i",–ö:"k",–õ:"l",
    –ú:"m",–ù:"n",–û:"o",–ü:"p",–†:"r",–°:"s",–¢:"t",–£:"u",–§:"f",–•:"h",–¶:"c",–ß:"ch",–®:"sh",
    –©:"shch",–™:"",–´:"y",–¨:"",–≠:"e",–Æ:"yu",–Ø:"ya"
  };
  const translit = [...str].map(ch => map[ch] ?? ch).join("");
  return translit
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/-+/g, "-")
    .replace(/^-|-$/g, "");
}
function xmlEscape(s) {
  return s
    .replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
function ymd(d) { return (d || new Date().toISOString()).slice(0, 10); }
async function fetchJSON(url) {
  const res = await fetch(url);
  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(`Strapi ${res.status}: ${text.slice(0, 400)}`);
  }
  return res.json();
}

// ‚Äî‚Äî‚Äî 1) –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ /card/:id/:slug ‚Äî‚Äî‚Äî
// Strapi v5 "–ø–ª–æ—Å–∫–∏–π" —Ñ–æ—Ä–º–∞—Ç: item.id, item.updatedAt, item.product.title
async function fetchCardUrls() {
  const pageSize = 100;
  let page = 1, all = [];
  while (true) {
    const url =
      `${STRAPI_URL}/api/cards` +
      `?fields=id,updatedAt` +
      `&populate[product][fields][0]=title` + // –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ title
      `&pagination[page]=${page}&pagination[pageSize]=${pageSize}`;
    const json = await fetchJSON(url);
    const batch = json.data ?? [];
    all.push(...batch);
    if (batch.length < pageSize) break;
    page++;
  }

  const broken = all.filter(it => !it?.product?.title);
  if (broken.length) {
    console.warn(`‚ö†Ô∏è Cards –±–µ–∑ product.title: ${broken.length}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º. –ü—Ä–∏–º–µ—Ä—ã id: ${broken.slice(0, 30).map(x=>x.id).join(", ")}`);
  }

  return all
    .filter(it => it?.product?.title)
    .map(it => {
      const id = it.id;
      const slug = slugify(it.product.title);
      return {
        loc: `${BASE_URL}/card/${id}/${encodeURIComponent(slug)}`,
        lastmod: ymd(it.updatedAt),
      };
    });
}

// ‚Äî‚Äî‚Äî 2) –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ /project-cards/:projectId/:slug ‚Äî‚Äî‚Äî
// –í —Ç–≤–æ—ë–º —Ñ—Ä–æ–Ω—Ç–µ slug = slugify(project.name)
// ‚Äî‚Äî‚Äî 2) –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ /project-cards/:projectId/:slug ‚Äî‚Äî‚Äî
async function fetchProjectCardUrls() {
  const pageSize = 100;
  let page = 1, all = [];
  while (true) {
    const url =
      `${STRAPI_URL}/api/project-cards` +
      `?fields=id,updatedAt` +                                   // ‚Üê —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      `&populate[project][fields][0]=id` +                       // ‚Üê –ø–æ–ª—è relation —á–µ—Ä–µ–∑ populate
      `&populate[project][fields][1]=name` +
      `&pagination[page]=${page}&pagination[pageSize]=${pageSize}`;

    const json = await fetchJSON(url);
    const batch = json.data ?? [];
    all.push(...batch);
    if (batch.length < pageSize) break;
    page++;
  }

  const broken = all.filter(it => !(it?.project?.id) || !(it?.project?.name));
  if (broken.length) {
    console.warn(`‚ö†Ô∏è Project-cards –±–µ–∑ project.name/id: ${broken.length}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º. –ü—Ä–∏–º–µ—Ä—ã project.id: ${broken.slice(0, 30).map(x => x?.project?.id ?? "null").join(", ")}`);
  }

  return all
    .filter(it => it?.project?.id && it?.project?.name)
    .map(it => {
      const projectId = it.project.id;
      const slug = slugify(it.project.name);
      return {
        loc: `${BASE_URL}/project-cards/${projectId}/${encodeURIComponent(slug)}`,
        lastmod: ymd(it.updatedAt),
      };
    });
}


// ‚Äî‚Äî‚Äî 3) —Å—Ç–∞—Ç—å–∏ /blog/:id/:slug ‚Äî‚Äî‚Äî
// slug = –ø–µ—Ä–≤—ã–π H1 –∏–∑ markdown-–ø–æ–ª—è "text" (–∫–∞–∫ —É —Ç–µ–±—è –≤ PostPage)
function extractFirstH1(markdownText = "") {
  // –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å H1: "# –ó–∞–≥–æ–ª–æ–≤–æ–∫"
  const m = markdownText.match(/(^|\n)\s*#\s+(.+?)\s*(\n|$)/);
  return m ? m[2].trim() : "";
}
async function fetchPostUrls() {
  const pageSize = 100;
  let page = 1, all = [];
  while (true) {
    const url =
      `${STRAPI_URL}/api/posts` +
      `?fields=id,updatedAt,text,date` + // text –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è H1
      `&pagination[page]=${page}&pagination[pageSize]=${pageSize}`;
    const json = await fetchJSON(url);
    const batch = json.data ?? [];
    all.push(...batch);
    if (batch.length < pageSize) break;
    page++;
  }

  const mapped = all.map(p => {
    const id = p.id;
    const h1 = extractFirstH1(p.text || "");
    const slug = slugify(h1) || `post-${id}`;
    return {
      loc: `${BASE_URL}/blog/${id}/${encodeURIComponent(slug)}`,
      lastmod: ymd(p.updatedAt || p.date),
    };
  });

  const fallbackCount = mapped.filter(u => /\/post-\d+$/.test(decodeURIComponent(u.loc))).length;
  if (fallbackCount) {
    console.warn(`‚ö†Ô∏è –ü–æ—Å—Ç–æ–≤ –±–µ–∑ H1: ${fallbackCount}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback "post-<id>".`);
  }
  return mapped;
}

// ‚Äî‚Äî‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è sitemap ‚Äî‚Äî‚Äî
async function main() {
  console.log("üß≠ Generating sitemap from:", STRAPI_URL);

  const staticUrls = STATIC_URLS.map(p => ({
    loc: `${BASE_URL}${p}`,
    lastmod: ymd(),
  }));

  const [cardUrls, projectUrls, postUrls] = await Promise.all([
    fetchCardUrls(),
    fetchProjectCardUrls(),
    fetchPostUrls(),
  ]);

  const allUrls = [...staticUrls, ...cardUrls, ...projectUrls, ...postUrls];

  const xml =
`<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${allUrls.map(u => `  <url>
    <loc>${xmlEscape(u.loc)}</loc>
    <lastmod>${u.lastmod}</lastmod>
  </url>`).join("\n")}
</urlset>
`;

  fs.mkdirSync(path.dirname(OUT_PATH), { recursive: true });
  fs.writeFileSync(OUT_PATH, xml);
  console.log(`‚úÖ Sitemap written to ${OUT_PATH} (${allUrls.length} URLs)`);
}

main().catch(err => {
  console.error("‚ùå Sitemap generation failed:", err);
  process.exit(1);
});
